<<<<<<< HEAD:app/models/user.rb
require 'digest/sha1'
class User < ActiveRecord::Base

  has_many :user_roles
  has_many :roles, :through => :user_roles

  
  # has_role? simply needs to return true or false whether a user 
  # has a role or not.  
  def has_role?(role)
    self.roles.count(:conditions => ['name = ?', role]) > 0
  end
  # ---------------------------------------

  # Assign a role
  def add_role(role)
    return if self.has_role?(role)
    self.roles << Role.find_by_name(role)
  end  
  
  
  
  # Virtual attribute for the unencrypted password
  attr_accessor :password

  validates_presence_of     :login, :email, :first_name, :last_name, 
                            :staff_or_student_number

  validates_length_of       :login,    :within => 3..40
  validates_length_of       :email,    :within => 3..100

  validates_uniqueness_of   :login, 
                            :email, 
                            :staff_or_student_number, 
                            :case_sensitive => false

  # Password validation
  validates_presence_of :password, 
         :if => :password_required?
  validates_presence_of :password_confirmation, 
         :if => :password_required?
  validates_length_of :password, :within => 4..40, 
         :if => :password_required?
  validates_confirmation_of :password, 
          :if => :password_required?
  
  before_save :encrypt_password
  
  # prevents a user from submitting a crafted form that bypasses activation
  # anything else you want your user to change should be added here.
  attr_accessible :login, :email, :password, :password_confirmation, :first_name, :last_name, :staff_or_student_number, :title

  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  def self.authenticate(login, password)
    u = find_by_login(login) # need to get the salt
    u && u.authenticated?(password) ? u : nil
  end

  # Encrypts some data with the salt.
  def self.encrypt(password, salt)
    Digest::SHA1.hexdigest("--#{salt}--#{password}--")
  end

  # Encrypts the password with the user salt
  def encrypt(password)
    self.class.encrypt(password, salt)
  end

  def authenticated?(password)
    crypted_password == encrypt(password)
  end

  def remember_token?
    remember_token_expires_at && Time.now.utc < remember_token_expires_at 
  end

  # These create and unset the fields required for remembering users between browser closes
  def remember_me
    remember_me_for 2.weeks
  end

  def remember_me_for(time)
    remember_me_until time.from_now.utc
  end

  def remember_me_until(time)
    self.remember_token_expires_at = time
    self.remember_token            = encrypt("#{email}--#{remember_token_expires_at}")
    save(false)
  end

  def forget_me
    self.remember_token_expires_at = nil
    self.remember_token            = nil
    save(false)
  end

  # Returns true if the user has just been activated.
  def recently_activated?
    @activated
  end

  
  protected
    # before filter 
    def encrypt_password
      return if password.blank?
      self.salt = Digest::SHA1.hexdigest("--#{Time.now.to_s}--#{login}--") if new_record?
      self.crypted_password = encrypt(password)
    end
      
    def password_required?
      crypted_password.blank? || !password.blank?
    end
    
    
end
=======
require 'digest/sha1'

class User < ActiveRecord::Base

  composed_of :name,
    :class_name => "Name",
    :mapping => [
      # database  ruby
      %w[ title title ],
      %w[ first_name first ],
      %w[ initials initials ],
      %w[ last_name last ],
      %w[ known_as known_as ]
    ]


  
  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  has_and_belongs_to_many :roles, :uniq => true
  
  # has_role? simply needs to return true or false whether a user has a role or not.  
  # It may be a good idea to have "admin" roles return true always
  def has_role?(role_in_question)
        return true if self.roles.find_by_name("admin")
        return self.roles.find_by_name(role_in_question)
  end
  # ---------------------------------------
  
  # Assign a role
  def add_role(role)
    return if self.has_role?(role.name)
    self.roles << role
  end    
  
  
  include Authentication
  include Authentication::ByPassword
  include Authentication::ByCookieToken

  validates_presence_of     :login
  validates_length_of       :login,    :within => 3..40
  validates_uniqueness_of   :login
  validates_format_of       :login,    :with => Authentication.login_regex, :message => Authentication.bad_login_message

  validates_format_of       :first_name,     :with => Authentication.name_regex,  :message => Authentication.bad_name_message, :allow_nil => true
  validates_length_of       :first_name,     :maximum => 100
  validates_format_of       :last_name,     :with => Authentication.name_regex,  :message => Authentication.bad_name_message, :allow_nil => true
  validates_length_of       :first_name,     :maximum => 100
  validates_format_of       :initials,  :with => Authentication.name_regex,  :message => Authentication.bad_name_message, :allow_nil => true
  validates_length_of       :initials,  :maximum => 10

  validates_presence_of     :email
  validates_length_of       :email,    :within => 6..100 #r@a.wk
  validates_uniqueness_of   :email
  validates_format_of       :email,    :with => Authentication.email_regex, :message => Authentication.bad_email_message

  

  # HACK HACK HACK -- how to do attr_accessible from here?
  # prevents a user from submitting a crafted form that bypasses activation
  # anything else you want your user to change should be added here.
  attr_accessible :login, :email, :name, :password, :password_confirmation,
    :title, :first_name, :initials, :last_name, :known_as



  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  #
  # uff.  this is really an authorization, not authentication routine.  
  # We really need a Dispatch Chain here or something.
  # This will also let us return a human error message.
  #
  def self.authenticate(login, password)
    return nil if login.blank? || password.blank?
    u = find_by_login(login.downcase) # need to get the salt
    u && u.authenticated?(password) ? u : nil
  end

  def login=(value)
    write_attribute :login, (value ? value.downcase : nil)
  end

  def email=(value)
    write_attribute :email, (value ? value.downcase : nil)
  end

  protected
    


end


>>>>>>> 336471e6be257cf55c9afa2a65f928fde34e41fe:app/models/user.rb
